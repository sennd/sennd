{"version":3,"sources":["routes/Home/index.js","routes/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","peerId","window","location","href","split","_this2","timer","setInterval","getId","id","setState","document","getElementById","innerHTML","console","log","connected","connect","click","react_default","a","createElement","className","card","title","height","src","alt","style","width","maxWidth","lib_default","value","concat","hostname","Component","App","routes_Home","Boolean","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAEeA,cCKb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,OAAQC,OAAOC,SAASC,KAAKC,MAAM,KAAK,GAAGA,MAAM,KAAK,IAAM,MAHlDZ,mFAMM,IAAAa,EAAAV,KAClBA,KAAKW,MAAQC,YAAY,kBAAKF,EAAKG,SAAS,oDAI5Cb,KAAKW,MAAQ,qCAQb,GAJIX,KAAKI,MAAMU,KACbd,KAAKe,SAAS,CAAED,GAAIE,SAASC,eAAe,OAAOC,WAAa,OAChEC,QAAQC,IAAIpB,KAAKI,MAAMU,KAEtBd,KAAKI,MAAMC,SAAWL,KAAKI,MAAMiB,UAAW,CAC7C,IAAIC,EAAUN,SAASC,eAAe,iBAAmBjB,KAAKI,MAAMC,QAChEiB,IACFA,EAAQC,QACRvB,KAAKe,SAAS,CAACM,WAAW,uCAS9B,OAFAF,QAAQC,IAAIpB,KAAKI,MAAMC,QAGrBmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,MAAQL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMG,OAAO,OAAOC,IAAI,WAAWC,IAAI,KAA5F,aACRC,MAAO,CAACC,MAAO,OAAQC,SAAS,UAGhCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAQY,MAAK,UAAAC,OAAYtB,SAAST,SAASgC,SAA9B,UAAAD,OAA+CtC,KAAKI,MAAMU,IAAM,WAE/EU,EAAAC,EAAAC,cAAA,OAAKZ,GAAG,QAERU,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,QAAMZ,GAAG,OAAT,QAA+BU,EAAAC,EAAAC,cAAA,WACzCF,EAAAC,EAAAC,cAAA,OAAKZ,GAAG,aAGRU,EAAAC,EAAAC,cAAA,qBAlDSc,aCSJC,mLANX,OACEjB,EAAAC,EAAAC,cAACgB,EAAD,aAHYF,aCKEG,QACW,cAA7BrC,OAAOC,SAASgC,UAEe,UAA7BjC,OAAOC,SAASgC,UAEhBjC,OAAOC,SAASgC,SAASK,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAAS/B,SAASC,eAAe,SD2H3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bf902dc9.chunk.js","sourcesContent":["import Home from './Home'\n\nexport default Home","import React, { Component } from 'react';\n// import {FileDrop} from '../../components'\nimport QRCode from 'qrcode.react';\nimport { Card } from 'antd';\n\n\nclass Home extends Component {\n  constructor() {\n    super()\n    this.state = {\n      peerId: window.location.href.split('/')[3].split('-')[1] || null\n    }\n  }\n  componentDidMount() {\n    this.timer = setInterval(()=> this.getId(), 1000);\n  }\n  \n  componentWillUnmount() {\n    this.timer = null; // here...\n  }\n\n  getId() {\n    if(!this.state.id) {\n      this.setState({ id: document.getElementById('iam').innerHTML || null})\n      console.log(this.state.id)\n    }\n    if(this.state.peerId && !this.state.connected) {\n      let connect = document.getElementById('connectbutton_' + this.state.peerId);\n      if (connect) {\n        connect.click()\n        this.setState({connected: true})\n      }\n    }\n\n  }\n\n  render() {\n    console.log(this.state.peerId)\n\n    return (\n      <div className=\"pa3 flex justify-center w-100\">\n        <Card\n          title={(<div className='flex justify-center' ><img className='mr2' height='30px' src='logo.png' alt=''/> Sennd.me</div>)}\n          style={{width: '100%', maxWidth:'500px'}}\n        >\n          {/*<FileDrop />*/}\n          <div className='w-100 flex justify-center'>\n            <QRCode value={`http://${document.location.hostname}/room-${this.state.id || 'null'}`}/>\n          </div>\n          <div id=\"main\">\n          \n          <hr />\n          <div>I am <span id=\"iam\">...</span></div><br />\n          <div id=\"peerZone\">\n          </div>\n\n          <hr />\n      </div>\n          </Card>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css'\nimport {Home} from './routes'\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Home />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}